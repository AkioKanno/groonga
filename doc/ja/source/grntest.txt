.. highlightlang:: none

grntest
=======

名前
----

grntest - groongaテストプログラム

書式
----

::

  grntest スクリプトファイル名 DB名 [-dest <ip/hostname>] 
  grntest -dir 

説明
----

grntestは、groonga汎用テストツールです。

groongaを単独のプロセスとして利用する場合はもちろん、サーバプログラムとして利用する場合の動作確認や実行速度測定が可能です。

grntest を利用するために必要なデータファイルは、ftp.groonga.orgから必要に応じダウンロードしますので、groonga及びgrntestが動作し、インターネットに接続できる環境であればgroongaコマンドの知識がなくてもgroongaの動作を確認できます。

現在は、linux 及びWindows上で動作します。make installしてもインストールは行われません。

オプション
----------

.. cmdoption:: -dir

  ftp.groonga.org に用意されたデータファイルを表示します。


.. cmdoption:: -dest 

  接続するgroongaサーバを、ipアドレスまたはホスト名で指定します。デフォルトはlocalhostです。

引数
----

.. cmdoption:: スクリプトファイル名

  grntestの動作方法(以下、grntest命令と呼びます)を記述したテキストファイルです。拡張子は.scrです。


使い方
------
まず、シェル上(Windowsならコマンドプロンプト上)で

   grntest test.scr 任意のDB名

とタイプしてください。もしgrntestが正常に動作すれば、

   test-ユーザ名-数字.log

というファイルが作成されるはずです。そうでない場合は、このドキュメントのトラブルシューティングの章を参照してください。


スクリプトファイル
------------------

スクリプトファイルは、grntest命令を記述したテキストファイルです。
";"セミコロンを利用して、一行に複数のgrntest命令を記述することができます。一行に複数のgrntestt命令がある場合、各命令は並列に実行されます。
"#"が先頭に付いた行はコメントとして解釈されます。


grntest命令
^^^^^^^^^^^

現在サポートされているgrntest命令は以下の4つです。

  do_local コマンドファイル [スレッド数] [繰り返し数]

    コマンドファイルをgroonga 単体で実行します。スレッド数が指定されている場合、複数のスレッドで同じコマンドファイルを同時に実行します。繰り返し数が指定されてい場合、コマンドファイルの内容を繰り返し実行します。スレッド数、繰り返し数とも省略時は1です。1スレッドで複数回動作させたい場合は、do_local コマンドファイル 1 [繰り返し数]と明示的に指定してください。

  do_gqpt コマンドファイル [スレッド数] [繰り返し数]

    コマンドファイルをgroonga サーバで実行します。スレッド数や繰り返し数の意味はdo_localの場合と同じです。

  rep_local コマンドファイル [スレッド数] [繰り返し数]

    コマンドファイルをgroonga 単体で実行し、より詳細な報告を行います。

  rep_gqpt コマンドファイル [スレッド数] [繰り返し数]

    コマンドファイルをgroonga サーバ実行し、より詳細な報告を行います。 スレッド数や繰り返し数の意味はdo_localと 同じです。

コマンドファイル
^^^^^^^^^^^^^^^^

コマンドファイルは、groonga組み込みコマンドを1行に1つずつ記述したテキストファイルです。拡張子に制限はありません。groonga組み込みコマンドに関しては./commands.htmlを参照してください。

サンプル
^^^^^^^

スクリプトファイルのサンプルです。::

  rep_local test.ddl
  do_local test.load; 
  do_gqtp test.select 10 10; do_local test.status 10


上記の意味は以下のとおりです。::

  test.dll というコマンドファイルをgroonga単体で実行し、詳細に報告する。
  test.load というコマンドファイルをgroonga単体で実行する。最後の";"セミコロンは複数のgrntest命令を記述する場合に必要ですが、この例のように1つのgrntest命令を実行する場合に付与しても問題ありません。
  test.select というコマンドファイルをgroongaサーバで10個のスレッドで同時に実行する。各スレッドはtest.selectの中身を10会繰り返す。また同時に、groonga単体でtest.statusというコマンドファイルを10個のスレッドで実行する。

grntest実行結果
---------------

grntestが正常に終了すると、(拡張子を除いた)スクリプト名-ユーザ名-実行開始時刻.logという形式のログファイルがカレントディレクトリに作られます。ログファイルは自動的にftp.groonga.org
に送信されます。ログファイルは以下のようなjson形式のテキストです。 

::

  [{"script": "test.scr",
    "user": "homepage",
    "date": "2010-02-04 00:47:40",
    "CPU": Intel(R) Pentium(R) 4 CPU 2.80GHz",
    "BIT": 32,
    "CORE": 1,
    "RAM": "975MBytes",
    "HDD": "257662232KBytes",
    "OS": "Linux 2.4.20-24.7-i686",
    "VERSION": "0.1.5"
  },
  {"jobs": "rep_local test.ddl",
  "detail" :[
  [0, "table_create res_table --key_type ShortText", 1352, 2765, [0]], 
  [0, "column_create res_table res_column --type Text", 2852, 5423, [0]], 
  [0, "column_create res_table user_column --type Text", 5485, 8229, [0]], 
  [0, "column_create res_table mail_column --type Text", 8288, 10997, [0]], 
  [0, "column_create res_table time_column --type Time", 11055, 12067, [0]], 
  [0, "status", 12090, 12112, {"alloc_count":152,"starttime":1265212060,"uptime":0}], 
  [0, "table_create thread_table --key_type ShortText", 12123, 13207, [0]], 
  [0, "column_create thread_table thread_title_column --type ShortText", 13232, 15869, [0]], 
  [0, "status", 15926, 15948, {"alloc_count":161,"starttime":1265212060,"uptime":0}], 
  [0, "table_create lexicon_table --flags 129 --key_type ShortText --default_tokenizer TokenBigram", 15958, 17239, [0]], 
  [0, "column_create lexicon_table inv_res_column 514 res_table res_column ", 17264, 31237, [0]], 
  [0, "column_create lexicon_table inv_thread_column 514 thread_table thread_title_column ", 31344, 45424, [0]], 
  [0, "status", 45528, 45547, {"alloc_count":184,"starttime":1265212060,"uptime":0}],], 
  "summary" :[{"job": "rep_local test.ddl", "latency": 45599, "self": 44784, "qps": 290.282244, "min": 19, "max": 14080}]},
  {"jobs": "do_local test.load; ",
  "summary" :[{"job": "do_local test.load", "latency": 64868, "self": 18934, "qps": 1056.300834, "min": 177, "max": 5260}]},
  {"jobs": "do_gqtp test.select 10 10; do_local test.status 10",
  "summary" :[{"job": " do_local test.status 10", "latency": 403082, "self": 337924, "qps": 118.369811, "min": 4, "max": 154}, {"job": "do_gqtp test.select 10 10", "latency": 828298, "self": 763140, "qps": 1965.563330, "min": 310, "max": 115700}]},
  {"total": 910868, "qps": 1726.924209}]

制限事項
--------

* スクリプトファイルの一行には複数のgrntest命令を記述できますが、すべてのスレッド数の合計は最大64です。 

* コマンドファイル中のgroongaコマンドの長さは最長10000byteです。

トラブルシューティング
----------------------

もし、grntestが正常に動作しない場合、まず以下を確認してください。

* インターネットに接続しているか？　grntestは動作のたびにftp.groonga.orgと通信します。ftp.groonga.orgと通信可能でない場合、grntestは正常に動作しません。

* groonga サーバが動作していないか？　grntestは、-dest オプションで明示的にサーバを指定しないかぎり、自動的にgroongaサーバを立ち上げます。すでにgroongaサーバが動作している場合、grntestは正常に動作しない可能性があります。

* 指定したDBが適切か？ grntestは、引数で指定したDBの中身はチェックしません。もし指定されたDBが存在しなければ自動的にDBを作成しますが、もしファイルとして存在する場合は中身に関わらず動作を続けてしまい、結果が異常になる可能性があります。

以上の原因でなければ、問題はgrntestかgroongaにあります。ご報告をお願いします。
