.. -*- rst -*-

.. highlightlang:: none

.. groonga-command
.. database: reference_grn_expr_script_syntax

Script Syntax
=============

TODO: revised.

Script syntax is a syntax to specify complex search condition. It is
similar to ECMAScript. For example, ``_key == "book"`` means that
groonga searches records that ``_key`` value is ``"book"``. All values
are string in :doc:`/reference/grn_expr/query_syntax` but its own type
in script syntax. For example, ``"book"`` is string, ``1`` is integer,
``TokenBigram`` is the object whose name is ``TokenBigram`` and so
on.

Script syntax has the original additional operators. They are
described after literals and basic oprators are described.

Literals
--------

Integer
^^^^^^^

Integer literal is sequence of ``0`` to ``9`` such as
``1234567890``. ``+`` and ``-`` can be prepended such as ``+29`` and
``-29``. Integer literal must be decimal. Octal notation, hex and so
on can't be used.

The maximum value of integer literal is ``9223372036854775807`` (``= 2
** 63 - 1``). The minimum value of integer literal is
``-9223372036854775808`` (``= -(2 ** 63)``).

Float
^^^^^

Float literal is sequence of ``0`` to ``9``, ``.`` and ``0`` to ``9``
such as ``3.14``. ``+`` and ``-`` can be prepended such as ``+3.14``
and ``-3.14``. ``${RADIX}e${EXPORNENTIAL}`` and
``${RADIX}E${EXPORNENTIAL}`` formats are also supported. For example,
``314e-2`` is the same as ``3.14``.

String
^^^^^^

String literal is ``"..."``. You need to escape ``"`` in literal by
prepending ``\\'' such as ``\"``. For example, ``"Say \"Hello!\".`` is
a literal for ``Say "Hello!".`` string.

String encoding must be the same as encoding of database. The default
encoding is UTF-8. It can be changed by ``--with-default-encoding``
configure option, ``--encodiong`` :doc:`/executables/groonga` option
and so on.

Boolean
^^^^^^^

Boolean literal is ``true`` and ``false``. ``true`` means true and
``false`` means false.

Null
^^^^

Null literal is ``null``. Groonga doesn't support null value but null
literal is supported.

Time
^^^^

TODO: ...

Time literal doesn't exit. String time notation, integer time notation,
float time notation are used for it.

Geo Point
^^^^^^^^^

TODO: ...

Geo point literal doesn't exist. String geo point notation is used for
it.

Array
^^^^^

TODO: ...

Object Literal
^^^^^^^^^^^^^^

TODO: ...

基本的な演算子
--------------

TODO: ...

独自の演算子
------------

groongaは検索に特化した2項演算子を追加しています。独自の2項演算子は ``@`` または ``*`` ではじまります。

``カラム @ 値``
^^^^^^^^^^^^^^^

``カラム`` をソースに設定している転置索引を用いて、 ``値`` で検索します。通常は全文検索になりますが、タグ検索などもこの書式で行います。 ``query`` ではデフォルトでこの演算子を使っていることになります。

``カラム @^ 値``
^^^^^^^^^^^^^^^^

``カラム`` の値を ``値`` で前方一致検索します。 ``カラム`` はパトリシアツリーまたはダブル配列の主キー（ ``_key`` ）でなければいけません。

``カラム @$ 値``
^^^^^^^^^^^^^^^^

``カラム`` の値を ``値`` で後方一致検索します。

未サポートです。

``カラム *N "単語1 単語2 ..."``
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

``カラム`` の値の中に ``単語1`` 、 ``単語2`` 、 ``...``  が近傍にある文書を検索します。（近傍検索。） ``カラム`` には全文検索用のインデックスが設定されていなければいけません。

未サポートです。

``カラム *S "文書"``
^^^^^^^^^^^^^^^^^^^^

``カラム`` の値が ``文書`` に類似している文書を検索します。（類似文書検索。） ``カラム`` には全文検索用のインデックスが設定されていなければいけません。

..
   ``カラム *T "単語"``
   ^^^^^^^^^^^^^^^^^^^^

   ???

``カラム *> 重み``
^^^^^^^^^^^^^^^^^^^^

``カラム`` の重みを ``重み`` 分上げます。

未サポート。

``カラム *< 重み``
^^^^^^^^^^^^^^^^^^^^

``カラム`` の重みを ``重み`` 分下げます。

未サポート。

``カラム *~ 重み``
^^^^^^^^^^^^^^^^^^^^

``カラム`` がマッチした場合、文書の検索スコアを ``重み`` 分下げます。

未サポート。
