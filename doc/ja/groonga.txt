groonga manual(v0.1.4)
                                  groonga (実行ファイル)

■名前

 groonga - 列指向データベース機能を持つ全文検索エンジンソフトウェア

■書式

 groonga [options] [dest] [command [args]]

■説明

 groongaは列指向のデータベース機能を持つ高速でスケーラブルな全文検索エンジンです。groongaの
 データベースは、groonga実行ファイルかCライブラリインタフェースを通して操作することができます。
 このマニュアルページでは、groonga実行ファイルの使い方について説明します。

■オプション

 -n
   新たなデータベースを作成します。

 -a
   スタンドアロンモードで実行します(デフォルト)。

 -c
   クライアントモードで実行します。

 -s
   サーバモードで実行します。

 -d
   デーモンモードで実行します。(forkする点がサーバモードと異なる)

 -e <encoding>
   データベースで使用する文字エンコーディング方式を指定します。新たなデータベースを作成する
   時のみ有効です。none, euc, utf8, sjis, latin, koi8rのいずれかが指定できます。

 -l <log level>
   ログレベルを指定します。0〜8までの数値が指定可能で、数が大きいほど多くのログが出力されます。

 -i <ip/hostname>
   サーバモードかデーモンモードで実行するとき、listenするアドレスを指定します。
   (デフォルトは`hostname`の返すホスト名)

 -p <port number>
   クライアント、サーバ、またはデーモンモードで、使用するTCPポート番号。
   (デフォルトは10041番)

 -h, --help
   ヘルプメッセージを出力します。

 --admin-html-path <path>
   httpサーバとしてgroongaが返す静的ページの場所を指定します。

 dest
   使用するデータベースのパス名を指定します。クライアントモードの場合は接続先のホスト名を
   指定します(デフォルト値は'localhost')。

 command [args]
   スタンドアロンおよびクライアントモードの場合は、実行するコマンドとその引数をコマンドライン
   引数に指定できます。省略すると、標準入力から一行ずつEOFに達するまでコマンドを読み取り、
   順次実行します。

■コマンド

 groonga実行ファイルを通してデータベースを操作する命令をコマンドと呼びます。コマンドは主に
 C言語で記述され、groongaプロセスにロードすることによって使用できるようになります。それぞれ
 のコマンドは一意な名前と、0個以上の引数を持ちます。

 引数は以下の2種類の方法のいずれかで指定することができます。

 形式1: コマンド名 値1 値2,..

 形式2: コマンド名 --引数名1 値1 --引数名2 値2,..

 形式1でコマンドを実行する場合は、定義された順番で値を指定しなければならず、途中の引数の値を
 省略することはできません。形式2でコマンドを実行する場合は、「--引数名」のように引数の名前を
 明示しなければならない代わりに、任意の順番で引数を指定することが可能で、途中の引数の指定を
 省略することもできます。

■組み込みコマンド

 以下のコマンドは組み込みコマンドとして予め定義されています。

 status
   groongaプロセスの状態を表示します。

 table_list
   DBに定義されているテーブルのリストを表示します。

 column_list
   テーブルに定義されているカラムのリストを表示します。

 table_create
   DBにテーブルを追加します。

 column_create
   テーブルにカラムを追加します。

 view_add
   VIEW型のテーブルに要素となるテーブルを定義します。

 load
   テーブルにレコードを挿入します。

 select
   テーブルに含まれるレコードを検索して表示します。

 define_selector
   検索条件をカスタマイズした新たな検索コマンドを定義します。

 quit
   データベースとのセッションを終了します。

 shutdown
   サーバ(デーモン)プロセスを停止します。

 log_level
   ログ出力レベルを設定します。

 log_put
   ログ出力を行います。

■例

 新しいデータベースを作成する。

   % groonga -n /var/tmp/hoge.db quit
   %

 作成済みのデータベースにテーブルを定義する。

   % groonga /var/tmp/hoge.db table_create Table 0 ShortText
   true
   %

 サーバを起動する。

   % groonga -d /var/tmp/hoge.db
   %

 サーバに接続し、テーブル一覧を表示する

   % groonga -c localhost table_list
   [["id","name","path","flags","domain"],[256,"Table","/tmp/hoge.db.0000100",49152,14]]
   %




- テーブルの追加

 table_createコマンドを使用します。

 書式: table_create name [flags [key_type [value_type [default_tokenizer]]]]

 作成するテーブルの名前をnameに指定します。
 flagsには、テーブルの属性を表す以下の数値を指定します。

 0   : 主キー値をハッシュ表で管理するテーブルを作成します。
 1   : 主キー値をパトリシア木で管理するテーブルを作成します。
 3   : 主キーを持たないテーブルを作成します。
 4   : 複数のテーブルをまとめて操作するための仮想的なテーブルを作成します。

 上記の値に、以下の値を加えることによってオプションの属性を指定できます。

 64  : 後方一致検索が可能な語彙表を作成します。(パトリシア木型のテーブルに指定可能)
 128 : 主キー値を正規化した上で登録します。(ハッシュ表型かパトリシア木型のテーブルに指定可能)

- カラムの追加

 column_createコマンドを使用します。

 書式: column_create table name flags type [source]

 カラムを追加するテーブルの名前をtableに指定します。
 作成するカラムの名前をnameに指定します。
 カラムの値が属する型をtypeに指定します。
 flagsには、カラムの属性を表す以下の数値を指定します。

 0   : 単一の値が格納できるカラムを作成します。
 1   : 複数の値の配列を格納できるカラムを作成します。
 2   : インデックス型のカラムを作成します。

 インデックス型のカラムを作成した場合は、
 インデックス対象となるカラムをsourceに指定します。
 また、以下の値を加えることでオプションの属性を指定できます。

 128 : 段落情報を格納するインデックスを作成します。
 256 : ウェイト情報を格納するインデックスを作成します。
 512 : 位置情報を格納するインデックス(完全転置インデックス)を作成します。

- データのロード

 loadコマンドを使用します。

 書式: load values table [columns]

 レコードを追加するテーブルの名前をtableに指定します。
 valuesにはレコードのキーやカラム値をjson形式で表現した文字列を渡します。
 有効なjson形式は以下のいずれかです。

 形式1: [[カラム名1, カラム名2,..], [カラム値1, カラム値2,..], [カラム値1, カラム値2,..],..]

 形式2: [{カラム名1: カラム値1, カラム名2: カラム値2}, {カラム名1: カラム値1, カラム名2: カラム値2},..]

 columnsパラメータを与えた場合には、形式1の[カラム名1, カラム名2,..]の要素は不要です。

 括弧の対応が取れていない文字列を指定した場合は、
 括弧が対応するまでvaluesの続きの文字列を標準入力から受け取ります。

- 検索

 selectコマンドを使用します。

 書式: select table match_column query filter foreach sortby output_columns offset limit

 検索対象のテーブルをtableに指定します。
 デフォルトの検索対象カラムをmatch_columnに指定します。
 query, filterには検索条件を表すクエリ文字列を指定します。
 foreachには、検索条件にマッチした全レコードに適用されるクエリ文字列を指定します。
 sortbyにはソート条件文字列を指定します。ソート条件文字列は、以下のような形式です。

  [-]カラム名1 [-]カラム名2 [-]カラム名3...

 カラム名1の値でソートし、値が同一である場合はカラム名2で、と順次比較を行います。
 カラム名の前に - を付加した場合は降順にソートします。(付加しない場合は昇順です)

 output_columnsには出力するカラム名のリストを指定します。
 offsetとlimitに出力するレコードの範囲(開始行と出力行数)を指定します。
 指定範囲のレコードの対象のカラムの値がjson形式で出力されます。

 また、上記に加えて以下のドリルダウン条件パラメータを指定することもできます。

 drilldown drilldown_sortby drilldown_output_columns drilldown_offset drilldown_limit

- クエリ文字列の書式

 groongaのクエリ文字列には2種類の書式があります。

 書式1: 以下の書式が指定できます。

  文字列         : 全文検索 (match_columnパラメータに指定したカラムに対して全文検索を実行する)

  "文字列"       : フレーズサーチ(match_columnパラメータに指定したカラムに対してフレーズ検索を実行する)

  カラム名:値    : カラム検索条件(カラム値 == 値)

  カラム名:!値   : カラム検索条件(カラム値 != 値)

  カラム名:<値   : カラム検索条件(カラム値 < 値)

  カラム名:>値   : カラム検索条件(カラム値 > 値)

  カラム名:<=値  : カラム検索条件(カラム値 <= 値)

  カラム名:>=値  : カラム検索条件(カラム値 >= 値)

  カラム名:%値   : カラム検索条件(カラム値 が指定した値を含んでいる)

  a OR b         : aとbとどちらかの条件がマッチする

  a + b          : aとbの両方がマッチする(デフォルト)

  a - b          : aにマッチし、bにはマッチしない

  ( )            : 複数の条件をまとめる

 書式2: 以下の書式が指定できます。

  文字列         : カラム名、変数名などのシンボル

  "文字列"       : 文字列リテラル

  数値           : 数値リテラル

  値1 比較演算子 値2
                 : 値1と値2を比較します。(値にはカラム、リテラル、関数式が指定可能)
                   比較演算子は <, <=, >, >=, == が使用可能

  値1 論理演算子 値2
                 : 論理演算子は &&, ||が使用可能

  左辺値 代入演算子 式
                 : 代入演算子は =, +=, -=, *=, /=が使用可能

  関数名(引数1,引数2,..)
                 : 関数呼び出し

 selectコマンドのqueryパラメータには書式1を、filterおよびforeachパラメータには書式2を指定します。

