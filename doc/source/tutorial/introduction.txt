.. -*- rst -*-

.. highlightlang:: none

.. groonga-command
.. database: tutorial
.. table_remove Site
.. table_remove Terms

Basic operations
================

The groonga package provides a C library (libgroonga) and a command line tool (groonga). This tutorial explains how to use the groonga command, with which you can create/operate databases, start a server, establish a connection with a server, etc.

Create database
---------------

You can create a new database with the following command.

Form::

  groonga -n DB_PATH_NAME

The '-n' option specifies to create a new database. DB_PATH_NAME specifies the path of the new database. Note that this command fails if the specified path already exists.

This command creates a database and then enters into interactive mode in which groonga prompts you to enter commands for operating that database. You can terminate this mode with Ctrl-d.

Execution example::

  % groonga -n /tmp/tutorial.db
  > Ctrl-d
  %

Operate database
----------------

Form::

  groonga DB_PATH_NAME [COMMAND]

DB_PATH_NAME specifies the path of a target database.

If COMMAND is specified, groonga executes COMMAND and returns the result. Otherwise, groonga starts in interactive mode that reads commands from the standard input and execute them one by one. This tutorial focuses on the interactive mode.

Let's try to see the status of a groonga process by using a command :doc:`/commands/status`.

.. groonga-command
.. include:: ../example/tutorial/introduction-1.log
.. .. % groonga -n /tmp/groonga-databases/introduction.db
.. status

As shown in the above example, a command basically returns a JSON array. The first element contains an error code, execution time, etc. The second element is the result of an operation.

Command format
--------------

Commands for operating a database accept arguments as follows::

 Form_1: COMMAND VALUE_1 VALUE_2 ..

 Form_2: COMMAND --NAME_1 VALUE_1 --NAME_2 VALUE_2 ..

In the first form, arguments must be passed in order. This kind of arguments are called positional arguments because the position of each argument determines its meaning.

In the second form, you can specify a parameter name with its value. So, the order of arguments is not defined. This kind of arguments are known as named parameters or keyword arguments.

If you want to specify a value which contains white-spaces or special characters, such as quotes and parentheses, please enclose the value with single-quotes or double-quotes.

For details, see also the paragraph of "command" in :doc:`/executables/groonga`.

Basic commands
--------------

 :doc:`/commands/status`
  Show status of a groonga process.
 :doc:`/commands/table_list`
  Show a list of tables defined in a database.
 :doc:`/commands/column_list`
  Show a list of columns defined in a table.
 :doc:`/commands/table_create`
  Add a table to a database.
 :doc:`/commands/column_create`
  Add a column to a table.
 :doc:`/commands/select`
  Search records from a table and show the result.
 :doc:`/commands/load`
  Insert records to a table.

Create table
------------

The :doc:`/commands/table_create` command creates a table.

In most cases, a table of groonga has a primary key which must be specified with its data type and index type. 

There are various data types such as integers, floating-point numbers, etc. The index type determines the search performance and the availability of prefix searches. We will explain the details later.

Let's create a 'Site' table which has a primary key of ShortText. In this example, the index type is HASH.

.. groonga-command
.. include:: ../example/tutorial/introduction-2.log
.. table_create --name Site --flags TABLE_HASH_KEY --key_type ShortText

Search
------

The :doc:`/commands/select` command shows contents of table.

.. groonga-command
.. include:: ../example/tutorial/introduction-3.log
.. select --table Site

When only a table is specified, the 'select' command returns the first (at most) 10 records of that table. "[0]" in the result shows the number of records in the 'Site' table. The next array is a list of columns. ["_id","Uint32"] is a column of UInt32, named "_id". ["_key","ShortText"] is a column of ShortText, named "_key".

The above two columns, '_id' and '_key', are the necessary columns. The '_id' column stores IDs those are automatically allocated by groonga. The '_key' column is associated with the primary key. You are not allowed to rename these columns.

Create column
-------------

The :doc:`/commands/column_create` command adds a column to a table.

Let's add a column of ShortText to store comments. You may give a descriptive name 'comment' to the column.

.. groonga-command
.. include:: ../example/tutorial/introduction-4.log
.. column_create --table Site --name title --flags COLUMN_SCALAR --type ShortText
.. select --table Site

The COLUMN_SCALAR flag specifies to add a regular column.

Create terminology table with fulltext-searching
------------------------------------------------

This tutorial explains fulltext searching with entried data in groonga table.

We need terminology table in fulltext-searching.
Terminology table is a table whose master key's values are words in text.
We create 'Terms' table, it has type of master key value is ShortText.

.. groonga-command
.. include:: ../example/tutorial/introduction-5.log
.. table_create --name Terms --flags TABLE_PAT_KEY|KEY_NORMALIZE --key_type ShortText --default_tokenizer TokenBigram

Many parameters is specified in this execution example.
You don't hove to understand all parameters.
There are the simple explaination, but you can skipped.

In this examples, 'TABLE_PAT_KEY|KEY_NORMALIZE' stores master key in patricia-trie and entries each teminology after nomalized.
The 'default_tokenizer' parametar specifies the way to tokenize target texts. In this examples, we specifies 'TokenBigram' as this parameter, and so we choose 'N-gram' generally called.

Create index-column with fulltext search
----------------------------------------

We will fulltext search 'title' column in 'Site' table. In this case, we create column whose type index in terminology table.

.. groonga-command
.. include:: ../example/tutorial/introduction-6.log
.. column_create --table Terms --name blog_title --flags COLUMN_INDEX|WITH_POSITION --type Site --source title

This command creates index column 'blog_title' in 'Term' table. '--type' option specifies target indexed table, and '--source' option does target index column.
In execution example, 'COLUMN_INDEX|WITH_POSITION' for '--flags' option specifies that this column is index column for storing information of terminology existing position. This option should be specified 'COLUMN_INDEX|WITH_POSITION' in generally fulltext searching. This tutorial does not deal with the reason why store information of terminology existing position.

Load data
---------

:doc:`/commands/load` is used to load data for groonga database. This command stores json-formatted data in a table.

.. groonga-command
.. include:: ../example/tutorial/introduction-7.log
.. load --table Site
.. [
.. {"_key":"http://example.org/","title":"This is test record 1!"},
.. {"_key":"http://example.net/","title":"test record 2."},
.. {"_key":"http://example.com/","title":"test test record three."},
.. {"_key":"http://example.net/afr","title":"test record four."},
.. {"_key":"http://example.org/aba","title":"test test test record five."},
.. {"_key":"http://example.com/rab","title":"test test test test record six."},
.. {"_key":"http://example.net/atv","title":"test test test record seven."},
.. {"_key":"http://example.org/gat","title":"test test record eight."},
.. {"_key":"http://example.com/vdw","title":"test test record nine."},
.. ]

Let's make sure that its table has data with 'select' command.

.. groonga-command
.. include:: ../example/tutorial/introduction-8.log
.. select --table Site

Search data
-----------

'_id' and '_key' columns are unique in groonga's table, so let's search data in table using these columns.

You can search data using 'select' command with 'query' parameter.

.. groonga-command
.. include:: ../example/tutorial/introduction-9.log
.. select --table Site --query _id:1

'_id:1' specified 'query' parameter means to search records whose '_id' column has '1'.

Let's search records with '_key' column.

.. groonga-command
.. include:: ../example/tutorial/introduction-10.log
.. select --table Site --query "_key:\"http://example.org/\""

'_key:\"http://example.org/\"' specified 'query' parameter means to search records whose '_key' column has '"http://example.org/"'.


Fulltext searching
------------------

Using 'query' parameter, you can fulltext search with index.

.. groonga-command
.. include:: ../example/tutorial/introduction-11.log
.. select --table Site --query title:@this

This command shows result of fulltext searching by string 'this' for 'title' column.

"title:@this" specified 'query' parameter means to search records whose 'title' column including 'this' string.

'select' command has parameter 'match_columns'.

If this parameter is specified, it means to search in columns specified 'match_columns' when 'query' parameter doesn't specify column-name condition.[1]_

If you specify 'match_columns' is 'title' and 'query' is 'this', you can take same result as above query.

.. groonga-command
.. include:: ../example/tutorial/introduction-12.log
.. select --table Site --match_columns title --query this

Specify output column
---------------------

'output_columns' parameter in 'select' command specifies columns shown in result of search.

If you want to specify some columns, you should separate column names by comma(,).

.. groonga-command
.. include:: ../example/tutorial/introduction-13.log
.. select --table Site --output_columns _key,title,_score --query title:@test

"_score" column is added to The groonga's result. This column has the higher number, the more condition of fulltext seaching matches text.

Ranges to display
-----------------

'select' command can display result in only specified ranges using 'offset' and 'limit' parameter. This parameters is useful when you want to show only a page in much result of searching.

'offset' parameter specifies starting point of result. If you want 'select' command to return from first records, this parameter specifies '0'.

'limit' parameter specifies how many records of searching result.

.. groonga-command
.. include:: ../example/tutorial/introduction-14.log
.. select --table Site --offset 0 --limit 3
.. select --table Site --offset 3 --limit 3
.. select --table Site --offset 7 --limit 3

Sort
-----

If you use 'sortby' parameter in 'select' command, this command sorts result of searching.

When 'sortby' parameter specifies column name, result is sorted in ascending-order to its column's value. This 'select' command also sort in descending-order when you add hyphen(-) before column name.

.. groonga-command
.. include:: ../example/tutorial/introduction-15.log
.. select --table Site --sortby -_id

For condition of sort, you can use '_score' column introduced in the paragraph of "Specify output column".

.. groonga-command
.. include:: ../example/tutorial/introduction-16.log
.. select --table Site --query title:@test --output_columns _id,_score,title --sortby _score

If you want to specify some column names, you should use comma(,) between these names. In this case, when same value of records is existed in first column, this command sorts result of searching to value of second column.

.. groonga-command
.. include:: ../example/tutorial/introduction-17.log
.. select --table Site --query title:@test --output_columns _id,_score,title --sortby _score,_id

.. rubric:: footnote

.. [1] In now groonga's version, you can only use 'match_columns' parameter in the case of existing index of fulltext searching. This parameter cannot be use in searching for ordinary columns.
