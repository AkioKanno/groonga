#!/bin/sh
# -*- indent-tabs-mode: nil; sh-indentation: 4 -*-
#
# Copyright(C) 2012-2013 Brazil
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

SERVICE_NAME=groonga-httpd
GROONGA_HTTPD=${SERVICE_NAME}
PIDFILE=/var/run/groonga/${GROONGA_HTTPD}.pid
OLD_PIDFILE=$PIDFILE.oldbin
STATUS_TIMEOUT=3

# Source function library.
if [ -f /lib/lsb/init-functions ]; then
    . /lib/lsb/init-functions
    if [ -f /etc/default/${SERVICE_NAME} ]; then
        . /etc/default/${SERVICE_NAME}
    fi
elif [ -f /etc/init.d/functions ]; then
    . /etc/init.d/functions
    if [ -f /etc/sysconfig/${SERVICE_NAME} ]; then
        . /etc/sysconfig/${SERVICE_NAME}
    fi
fi

wait_until () {
    local rest=$STATUS_TIMEOUT
    local duration=1
    while [ $rest -ge 0 ]; do
        if "$@"; then
            return 0
        fi
        rest=$(($rest - $duration))
        sleep $duration
    done
    return 1
}

if [ "$1" = "try-restart" ]; then
    if [ ! -f "$PIDFILE" ]; then
        exit 0
    fi
fi

killproc -p $PIDFILE ${GROONGA_HTTPD} -USR2

if ! wait_until [ -f $OLD_PIDFILE ]; then
    echo "Failed to start new groonga-httpd master."
    exit 1
fi

OLD_PID=`cat $OLD_PIDFILE`

# Switch worker process.
kill -WINCH `cat $OLD_PIDFILE`

if ! wait_until [ -f "$PIDFILE" ]; then
    echo "Failed to switch worker process."
    exit 2
fi
PID=`cat $PIDFILE`

OLD_WORKER_PROCESS=`pgrep -P $OLD_PID | grep -v $PID`
for pid in $OLD_WORKER_PROCESS; do
    wait_until ps --pid=$pid > /dev/null
done
OLD_WORKER_PROCESS=`pgrep -P $OLD_PID | grep -v $PID`
if [ -n "$OLD_WORKER_PROCESS" ]; then
    echo "Failed to stop old groonga-httpd worker process."
    killproc -p $PIDFILE ${GROONGA_HTTPD} -QUIT
    echo "Rollback to old groonga-httpd master."
    exit 2
fi

# Stop old master process.
killproc -p $OLD_PIDFILE ${GROONGA_HTTPD} -QUIT
exit $?

