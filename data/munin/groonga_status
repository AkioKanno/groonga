#!/usr/bin/env ruby

#%# family=auto
#%# capabilities=autoconf

require 'net/http'
begin
  require 'json'
rescue LoadError
  require 'rubygems'
  require 'json'
end

label = ENV["label"]
@groonga = ENV["groonga"] || "groonga"
@host = ENV["host"] || "localhost"
@protocol = ENV["protocol"] || "http"
@port = ENV["port"] || 10041

command = ARGV.shift

def parse(success, result)
  if success
    begin
      status, body = JSON.parse(result)
      return_code, start_time, elapsed, error_message = status
      if return_code.zero?
        [success, body]
      else
        [false, error_message]
      end
    rescue JSON::ParserError
      [false, $!.message]
    end
  else
    [success, result]
  end
end

def run(command, *args)
  case @protocol
  when "gqtp"
    groonga = "#{@groonga} -p #{@port} -c #{@host}"
    result = `#{groonga} #{command} #{args.join(' ')} 2>&1`
    parse($?.success?, result)
  when "http"
    result = Net::HTTP.start(@host, @port) do |http|
      http.get("/d/#{command}")
    end
    parse(result.code == "200", result.body)
  end
end

def parse_list(header, list)
  list.collect do |item|
    parsed_item = {}
    header.each_with_index do |(name, type), i|
      parsed_item[name] = item[i]
    end
    parsed_item
  end
end

case command
when "autoconf", "detect"
  success, body = run("status")
  if success
    puts "yes"
    exit(true)
  else
    puts "no (#{body})"
    exit(false)
  end
when "config"
  if label.nil?
    title = "groonga: status"
  else
    title = "groonga: #{label}: status"
  end
  puts <<EOF
graph_title #{title}
graph_vlabel status
graph_category groonga
graph_info groonga status

alloc_count.label alloc count
alloc_count.type GAUGE
EOF
  exit(true)
end

success, body = run("status")
unless success
  puts("error: #{body}")
  exit(false)
end
puts <<EOF
alloc_count.value #{body["alloc_count"]}
EOF
