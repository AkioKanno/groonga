#!/bin/sh
# -*- indent-tabs-mode: nil; sh-indentation: 4 -*-
#
# Copyright(C) 2012-2013 Brazil
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

SERVICE_NAME=groonga-httpd
GROONGA_HTTPD=${SERVICE_NAME}
PID_FILE=/var/run/groonga/${GROONGA_HTTPD}.pid
STATUS_TIMEOUT=3

# Source configuration.
if [ -f /etc/default/${SERVICE_NAME} ]; then
    . /etc/default/${SERVICE_NAME}
elif [ -f /etc/sysconfig/${SERVICE_NAME} ]; then
    . /etc/sysconfig/${SERVICE_NAME}
fi

wait_until () {
    local rest=${STATUS_TIMEOUT}
    local duration=1
    while [ ${rest} -ge 0 ]; do
        if "$@"; then
            return 0
        fi
        rest=$((${rest} - ${duration}))
        sleep ${duration}
    done
    return 1
}

start_master () {
    local pid=$1
    kill -USR2 ${pid}
}

switch_worker () {
    local pid=$1
    kill -WINCH ${pid}
}

stop_master () {
    local pid=$1
    kill -QUIT ${pid}
}

if [ "$1" = "try-restart" ]; then
    if [ ! -f "${PID_FILE}" ]; then
        exit 0
    fi
fi

OLD_PID=$(cat ${PID_FILE})
start_master ${OLD_PID}

if ! wait_until [ -f ${OLD_PID_FILE} ]; then
    echo "Failed to start new groonga-httpd master."
    exit 1
fi

switch_worker ${OLD_PID}

if ! wait_until [ -f "${PID_FILE}" ]; then
    echo "Failed to switch worker process."
    exit 2
fi
NEW_PID=$(cat ${PID_FILE})

OLD_WORKER_PROCESSES=$(pgrep -P ${OLD_PID} | grep -v ${NEW_PID})
for pid in ${OLD_WORKER_PROCESSES}; do
    wait_until ps --pid=${pid} > /dev/null
done
OLD_WORKER_PROCESSES=$(pgrep -P ${OLD_PID} | grep -v ${NEW_PID})
if [ -n "${OLD_WORKER_PROCESSES}" ]; then
    echo "Failed to stop old groonga-httpd worker process."
    stop_master ${NEW_PID}
    echo "Rollback to old groonga-httpd master."
    exit 2
fi

stop_master ${OLD_PID}
exit $?

