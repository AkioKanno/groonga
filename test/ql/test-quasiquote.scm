;; -*- coding: utf-8 -*-

(define-module test-quasiquote
  (extend test.unit.test-case)
  (use ql-test-utils)
  (use ql-assertions))
(select-module test-quasiquote)

(define (setup)
  (setup-ql)
  (assert-ql-send '(define (abs a) (if (> a 0) a (- 0 a))))
  #f)

(define (teardown)
  (teardown-ql))

(define (test-r4rs)
  (assert-ql-equal '(list 3 4)
                   '`(list ,(+ 1 2) 4))
  (assert-ql-equal '(list a 'a)
                   '(let ((name 'a))
                      `(list ,name ',name)))
  (assert-ql-equal '(a 3 4 5 6 b)
                   '`(a ,(+ 1 2) ,@(map abs '(4 -5 6)) b))
  (assert-ql-equal '((foo 7) . cons)
                   '`((foo ,(- 10 3))
                      ,@(cdr '(c)) . ,(car '(cons))))
  (assert-ql-equal 5 '`,(+ 2 3))
  (assert-ql-equal '(a `(b ,(+ 1 2) ,(foo 4 d) e) f)
                   '`(a `(b ,(+ 1 2) ,(foo ,(+ 1 3) d) e) f))
  (assert-ql-equal '(a `(b ,x ,'y d) e)
                   '(let ((name1 'x)
                          (name2 'y))
                      `(a `(b ,,name1 ,',name2 d) e)))
  #f)

(define (test-gunya!!!)
  (assert-ql-equal '(list 3 4)
                   '(quasiquote (list (unquote (+ 1 2)) 4)))
  (assert-ql-equal '`(list ,(+ 1 2) 4)
                   ''(quasiquote (list (unquote (+ 1 2)) 4)))
  (assert-ql-equal '(7) '`(7 ,@(cdr '(c))))
  (assert-ql-equal '(1 2 3) '`(,@'(1 2 3)))
  (assert-ql-equal '((1 2 3) 1 2 3)
                   '(let ((a '(1 2 3)))
                      (quasiquote ((unquote a) unquote a))))
  (assert-ql-equal '(1 2 3 1 2 3)
                   '(let ((a '(1 2 3)))
                      (quasiquote ((unquote-splicing a) unquote a))))
  (assert-ql-equal '((1 2 3) 1 2 3)
                   '(let ((a '(1 2 3)))
                      (quasiquote ((unquote a) (unquote-splicing a)))))
  (assert-ql-equal '(1 2 3 1 2 3)
                   '(let ((a '(1 2 3)))
                      (quasiquote ((unquote-splicing a) (unquote-splicing a)))))
  (assert-ql-equal '((1 2 3 1 2 3) (1 2 3 1 2 3))
                   '(let ((a '(1 2 3)))
                      (quasiquote (((unquote-splicing a) unquote a)
                                   ((unquote-splicing a) unquote a)))))
  #f)

(provide "test-quasiquote")
