.. -*- rst -*-

.. highlightlang:: none

.. groonga-command
.. database: spec_query_syntax

Query syntax
============

Query syntax is a syntax to specify search condition for common Web
search form. It is similar to Google's search form. For example,
``word1 word2`` means that groonga searches records that contain both
``word1`` and ``word2``. ``word1 OR word2`` means that groogna
searches records that contain either ``word1`` or ``word2``.

Query syntax consists of ``conditional expression`` and ``combind
expression``. ``Conditinal expression`` specifies an
condition. ``Combinded expression`` consists of one or more
``conditional expression`` or ``combined expression``.

Sample data
-----------

Here are a schema definition and sample data to show usage.

.. groonga-command
.. include:: ../example/spec/query_syntax/setup.log
.. table_create Entries TABLE_HASH_KEY ShortText
.. column_create Entries content COLUMN_SCALAR Text
.. column_create Entries n_likes COLUMN_SCALAR UInt32
.. table_create Terms TABLE_PAT_KEY|KEY_NORMALIZE ShortText --default_tokenizer TokenBigram
.. column_create Terms entries_key_index COLUMN_INDEX|WITH_POSITION Entries _key
.. column_create Terms entries_content_index COLUMN_INDEX|WITH_POSITION Entries content
.. load --table Entries
.. [
.. {"_key":    "The first post!",
..  "content": "Welcome! This is my first post!",
..  "n_likes": 5},
.. {"_key":    "Groonga",
..  "content": "I started to use groonga. It's very fast!",
..  "n_likes": 10},
.. {"_key":    "Mroonga",
..  "content": "I also started to use mroonga. It's also very fast! Really fast!",
..  "n_likes": 15},
.. {"_key":    "Good-bye Senna",
..  "content": "I migrated all Senna system!",
..  "n_likes": 3},
.. {"_key":    "Good-bye Tritonn",
..  "content": "I also migrated all Tritonn system!",
..  "n_likes": 3}
.. ]

There is a table, ``Entries``, for blog entries. An entry has title,
content and the number of likes for the entry. Title is key of
``Entries``. Content is value of ``Entries.content`` column. The
number of likes is value of ``Entries.n_likes`` column.

``Entries._key`` column and ``Entries.content`` column are indexed
using ``TokenBigram`` tokenizer. So both ``Entries._key`` and
``Entries.content`` are fulltext search ready.

OK. The schema and data for examples are ready.

Conditional expression
----------------------

Here is available conditional expression list.

Full text search condition
^^^^^^^^^^^^^^^^^^^^^^^^^^

Its syntax is ``keyword``.

``Full text search condition`` is the most simple conditional
expression. It specifies a full text search condition against the
default match columns.

You should specify the default match columns for full text
search. They can be specified by ``--match_columns`` option in
:doc:`/commands/select`. If you don't specify the default match
columns, this conditional expression fails.

This conditional expression does full text search with
``keyword``. ``keyword`` should not contain any spaces. If ``keyword``
contains a space such as ``search keyword``, it means two full text
search conditions; ``search`` and ``keyword``. If you want to
specifies a keyword that contains one or more spaces, you can use
``phrase search condition`` that is described below.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_full_text_search.log
.. select Entries --match_columns content --query fast

The expression matches records that contain a word ``fast`` in
``content`` column value. ``content`` column is the default match
column.

Phrase search condition
^^^^^^^^^^^^^^^^^^^^^^^

Its syntax is ``"search keyword"``.

``Phrase search condition`` specifies a phrase search condition
against the default match columns.

You should specify the default match columns for full text
search. They can be specified by ``--match_columns`` option in
:doc:`/commands/select`. If you don't specify the default match
columns, this conditional expression fails.

This conditional expression does phrase search with ``search
keyword``. Phrase search searches records that contain ``search`` and
``keyword`` and those terms are appeared in the same order and
adjacent. Thus, ``Put a search keyword in the form`` is matched but
``Search by the keyword`` and ``There is a keyword. Search by it!``
aren't matched.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_phrase_search.log
.. select Entries --match_columns content --query '"I started"'

The expression matches records that contain a phrase ``I started`` in
``content`` column value. ``I also started`` isn't matched because
``I`` and ``started`` aren't adjacent. ``content`` column is the
default match column.

Equal condition
^^^^^^^^^^^^^^^

Its syntax is ``column:value``.

It matches records that ``column`` value is equal to ``value``.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_equal.log
.. select Entries --query _key:Groonga

The expression matches records that ``_key`` column value is
equal to ``Groonga`` from ``Entries`` table.

Not equal condition
^^^^^^^^^^^^^^^^^^^

Its syntax is ``column:!value``.

It matches records that ``column`` value isn't equal to ``value``.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_not_equal.log
.. select Entries --query _key:!Groonga

The expression matches records that ``_key`` column value is not equal
to ``Groonga`` from ``Entries`` table.

Less than condition
^^^^^^^^^^^^^^^^^^^

Its syntax is ``column:<value``.

It matches records that ``column`` value is less than ``value``.

If ``column`` type is numerical type such as ``Int32``, ``column``
value and ``value`` are compared as number. If ``column`` type is text
type such as ``ShortText``, ``column`` value and ``value`` are
compared as bit sequence.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_less_than.log
.. select Entries --query n_likes:<10

The expression matches records that ``n_likes`` column value is less
than ``10`` from ``Entries`` table.

Greater than condition
^^^^^^^^^^^^^^^^^^^^^^

Its syntax is ``column:>value``.

It matches records that ``column`` value is greater than ``value``.

If ``column`` type is numerical type such as ``Int32``, ``column``
value and ``value`` are compared as number. If ``column`` type is text
type such as ``ShortText``, ``column`` value and ``value`` are
compared as bit sequence.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_greater_than.log
.. select Entries --query n_likes:>10

The expression matches records that ``n_likes`` column value is greater
than ``10`` from ``Entries`` table.

Less than or equal to condition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Its syntax is ``column:<=value``.

It matches records that ``column`` value is less than or equal to
``value``.

If ``column`` type is numerical type such as ``Int32``, ``column``
value and ``value`` are compared as number. If ``column`` type is text
type such as ``ShortText``, ``column`` value and ``value`` are
compared as bit sequence.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_less_than_or_equal_to.log
.. select Entries --query n_likes:<=10

The expression matches records that ``n_likes`` column value is less
than or equal to ``10`` from ``Entries`` table.

Greater than or equal to condition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Its syntax is ``column:>=value``.

It matches records that ``column`` value is greater than or equal to
``value``.

If ``column`` type is numerical type such as ``Int32``, ``column``
value and ``value`` are compared as number. If ``column`` type is text
type such as ``ShortText``, ``column`` value and ``value`` are
compared as bit sequence.

It doesn't require the default match columns such as ``full text
search condition`` and ``phrase search condition``.

Here is a simple exmaple.

.. groonga-command
.. include:: ../example/spec/query_syntax/simple_greater_than_or_equal_to.log
.. select Entries --query n_likes:>=10

The expression matches records that ``n_likes`` column value is
greater than or equal to ``10`` from ``Entries`` table.

``カラム名:@文字列``
^^^^^^^^^^^^^^^^^^^^

全文検索条件(カラム値が指定された文字列を含んでいる)

Combined expression
-------------------

複数の条件式を結合するために以下の演算子が使用できます。

``a OR b``
^^^^^^^^^^

論理和( ``a`` と ``b`` といずれかの条件がマッチする)

``a + b``
^^^^^^^^^

論理積( ``a`` と ``b`` の両方がマッチする)

``a - b``
^^^^^^^^^

``a`` にマッチし、 ``b`` にはマッチしない

``(...)``
^^^^^^^^^

複数の条件をまとめる
